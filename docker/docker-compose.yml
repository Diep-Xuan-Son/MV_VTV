x-shared-env: &shared-api-worker-env
  REDISSERVER_URL: ${REDISSERVER_URL:-http://redis:8502}
  REDISSERVER_PASSWORD: ${REDISSERVER_PASSWORD:-RedisAuth}

  KAFKA_ADDRESS: ${KAFKA_ADDRESS:-broker1:8504}
  TOPIC_DATA: ${TOPIC_DATA:-url}
  TOPIC_QUERY: ${TOPIC_QUERY:-query}
  GROUP_ID_DATA: ${GROUP_ID_DATA:-data_consumer}
  GROUP_ID_QUERY: ${GROUP_ID_QUERY:-query_consumer}

  COLLECTION_NAME: ${COLLECTION_NAME:-mvvtv}

  MINIO_URL: ${MINIO_URL:-minio:8500}
  BUCKET_NAME: ${BUCKET_NAME:-data_mvvtv}
  MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-demo}
  MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-demo123456}

  API_KEY_OPENAI: ${API_KEY_OPENAI:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGlfa2V5Ijoic2stcHJvai1QSDNHNnlMVEticmdvaU9ieTA4YlVMNHc0eVYxR3NJa25IeEltTl9VMFI1WmVsOWpKcDI0MzZuNUEwOTdVdTVDeXVFMDJha1RqNVQzQmxia0ZKX3dJTUw2RHVrZzh4eWtsUXdsMTN0b2JfcGVkV1c0T1hsNzhQWGVIcDhOLW1DNjY1ZE1CdUlLMFVlWEt1bzRRUnk2Ylk1dDNYSUEifQ.2qjUENU0rafI6syRlTfnKIsm6O4zuhHRqahUcculn8E}
  API_KEY_GEM: ${API_KEY_GEM:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGlfa2V5IjoiQUl6YVN5Q1BKSHNJYUxXaGdMakllQkZVS3E4VHFrclRFdWhGd2xzIn0.7iN_1kRmOahYrT7i5FUplOYeda1s7QhYzk-D-AlgWgE}

  NUM_WORKER: ${NUM_WORKER:-1}

services:
  minio:
    image: quay.io/minio/minio
    container_name: mvvtv_minio
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-demo}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-demo123456}
    ports: 
      - "8500:8500"
      - "8501:8501"
    volumes:
      - ./minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/minio/health/live"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      mynetwork:
    profiles:
      - minio
    command: server /data --address ":8500" --console-address ":8501"

  redis:
    image: redis/redis-stack:latest
    container_name: mvvtv_redis
    restart: always
    environment:
      - REDIS_ARGS=--requirepass root
    ports: 
      - "8502:8502"
    volumes:
      - ./redis_data:/data
      - ./redis_config/redis1.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "8502", "-a", "RedisAuth", "ping" ]
    networks:
      mynetwork:
    profiles:
      - redis
    command: redis-server /usr/local/etc/redis/redis.conf

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper_mvvtv
    ports:
      - "8503:2188"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2188
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      mynetwork:
    healthcheck:
      test: echo srvr | nc zookeeper 2188 || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    profiles:
      - zookeeper

  broker1:
    image: confluentinc/cp-server:6.2.5
    container_name: mmv_broker1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2188"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker1:28504,PLAINTEXT_HOST://localhost:8504
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1           # Replication factor for the offsets topic
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1   # Replication factor for transaction logs
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1              # Minimum in-sync replicas for transactional logs
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0           # Initial delay before consumer group rebalancing
      KAFKA_NUM_PARTITIONS: ${NUM_WORKER:-1}              # Default number of partitions for new topics
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
    ports:
      - "8504:8504"     # Port for Kafka broker
    # volumes:
    #   - ./kafka-data/broker1:/tmp/kraft-combined-logs
    networks:
      mynetwork:
    healthcheck:
      test: nc -z localhost 8504 || exit -1
      interval: 10s
      timeout: 50s
      retries: 3
    profiles:
      - broker1
    command: >
      bash -c "
        /etc/confluent/docker/run &  # Start Kafka in the background
        sleep 15 &&  # Wait for Kafka to start
        kafka-topics --create --if-not-exists --bootstrap-server localhost:8504 --replication-factor 1 --topic url --config retention.ms=7200000 --config cleanup.policy=delete --config max.message.bytes=10485760 && \  # 10 MB
        kafka-topics --create --if-not-exists --bootstrap-server localhost:8504 --replication-factor 1 --topic query --config retention.ms=7200000 --config cleanup.policy=delete --config max.message.bytes=5242880 && \  # 5 MB
        wait
      "

  # Store Avro schemas for topics to ensure schema compatibility
  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: mmv_schema
    depends_on:
      broker1:
        condition: service_healthy
    ports:
      - "8505:8081"
    healthcheck:
      start_period: 10s
      interval: 10s
      retries: 20
      test: curl --user superUser:superUser --fail --silent --insecure http://localhost:8081/subjects --output /dev/null || exit 1
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker1:28504'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      mynetwork:
    profiles:
      - schema

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    container_name: mmv_control_center
    depends_on:
      broker1:
        condition: service_healthy
      # schema-registry:
      #   condition: service_healthy
    ports:
      - "8506:9021"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9021/healthcheck"] # Adjust the URL and options as needed
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker1:28504'
      # CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'debezium:8083'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      # How many copies for control-center internal topics
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      # Number of partitions for control-center internal topics
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      # CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      # Health check endpoint to monitor status of connectors
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
      # How many copies for confluent metrics topics
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
      CONTROL_CENTER_REST_LISTENERS: "http://0.0.0.0:9021"
    networks:
      mynetwork:
    profiles:
      - cc

  mv_service:
    image: dixuson/mv_vtv:cu128_v2
    container_name: mvvtv
    restart: always
    environment:
      REDISSERVER_URL: ${REDISSERVER_URL:-http://redis:8502}
      REDISSERVER_PASSWORD: ${REDISSERVER_PASSWORD:-RedisAuth}

      KAFKA_ADDRESS: ${KAFKA_ADDRESS:-broker1:8504}
      TOPIC_DATA: ${TOPIC_DATA:-url}
      TOPIC_QUERY: ${TOPIC_QUERY:-query}
      GROUP_ID_DATA: ${GROUP_ID_DATA:-data_consumer}
      GROUP_ID_QUERY: ${GROUP_ID_QUERY:-query_consumer}

      COLLECTION_NAME: ${COLLECTION_NAME:-mvvtv}

      MINIO_URL: ${MINIO_URL:-minio:8500}
      BUCKET_NAME: ${BUCKET_NAME:-data_mvvtv}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-demo}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-demo123456}

      SECRET_KEY: MMV
      API_KEY_OPENAI: ${API_KEY_OPENAI:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGlfa2V5Ijoic2stcHJvai1QSDNHNnlMVEticmdvaU9ieTA4YlVMNHc0eVYxR3NJa25IeEltTl9VMFI1WmVsOWpKcDI0MzZuNUEwOTdVdTVDeXVFMDJha1RqNVQzQmxia0ZKX3dJTUw2RHVrZzh4eWtsUXdsMTN0b2JfcGVkV1c0T1hsNzhQWGVIcDhOLW1DNjY1ZE1CdUlLMFVlWEt1bzRRUnk2Ylk1dDNYSUEifQ.2qjUENU0rafI6syRlTfnKIsm6O4zuhHRqahUcculn8E}
      API_KEY_GEM: ${API_KEY_GEM:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGlfa2V5IjoiQUl6YVN5Q1BKSHNJYUxXaGdMakllQkZVS3E4VHFrclRFdWhGd2xzIn0.7iN_1kRmOahYrT7i5FUplOYeda1s7QhYzk-D-AlgWgE}

      NUM_WORKER: ${NUM_WORKER:-1}

      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: all
    build:
      dockerfile: Dockerfile_controller
    ports: 
      - "8507:8507"
      - "8508:8508"
    depends_on:
      redis:
        condition: service_started
      broker1:
        condition: service_healthy
      minio:
        condition: service_started
    volumes:
      - ./static:/app/static
      - ./src:/workspace/
      - ./logs:/app/logs
    networks:
      mynetwork:
    profiles:
      - mv_vtv
    # command: python3.11 controller.py
    command: sh -c "nohup streamlit run ui.py --server.address 0.0.0.0 --server.port 8508 > ./logs/streamlit.log 2>&1 & uvicorn --workers $NUM_WORKER --host 0.0.0.0 --port 8507 controller:app"
    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            device_ids: ['0']
            capabilities: [gpu]


networks:
  mynetwork:
    driver: bridge

# docker compose -f docker-compose.yml --profile dev1 up -d
# docker compose -f docker-compose.yml --profile "*" up -d
# docker compose -f docker-compose.yml --profile triton_server up -d